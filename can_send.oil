//////////////////////////////////////////////////////////////////////////////////
// Universidade de Brasilia (UnB)
// Faculdade do Gama
// Curso: Engenharia Automotiva
// Disciplina : Engenharia de Software Automotivo
//////////////////////////////////////////////////////////////////////////////////

OIL_VERSION = "2.5" : "test";

 CPU test {
 OS config {
    STATUS = STANDARD;
	BUILD = TRUE {
		TRAMPOLINE_BASE_PATH = "../../.."; 		 // L14 -> diretório base relativo do Trampoline. 
		APP_NAME             = "image_can_send"; // este parâmetro deve ser configurado em função da localização 
		APP_SRC 			 = "can_send.cpp";	 // dos arquivos .cpp e .oil.
		CPPCOMPILER 		 = "avr-g++";		 // L15 -> nome da aplicação compilada. Esta declaração é 
		COMPILER 			 = "avr-gcc";		 // utilizada para especificar o nome a ser atribuído ao arquivo 
		LINKER 				 = "avr-gcc";		 // contendo a imagem binária gerada (image.hex)nome do arquivo de código-fonte da aplicação
		ASSEMBLER 			 = "avr-gcc";
		COPIER 				 = "avr-objcopy";
		SYSTEM 				 = PYTHON;
		LIBRARY 			 = serial;
		LIBRARY 			 = mcp_can;
		};
	SYSTEM_CALL = TRUE;
	};

 APPMODE stdAppmode {};

 ALARM periodicAlarm { //Este objeto é comumente utilizado para disparar ações periódicas
	COUNTER = SystemCounter;
	ACTION = ACTIVATETASK { // ação que o alarme deve executar todas as vezes em que o período do alarme expirar
		TASK = SendCanFrame;
		};
	AUTOSTART = TRUE {
		ALARMTIME = 1000; //ativado a cada 1024 ms
		CYCLETIME = 1000; //ativado a cada 1024 ms
		APPMODE = stdAppmode;
		};
	};

 TASK SendCanFrame { // declarada a task (SendCanFrame) responsávelpor enviar periodicamente 
	PRIORITY = 20;   // (isto é, a cada ativação do alarme) um frame de dados através da rede CAN.
	AUTOSTART = FALSE;
	ACTIVATION = 1;
	SCHEDULE = FULL;
	STACKSIZE = 256;
	};
 };